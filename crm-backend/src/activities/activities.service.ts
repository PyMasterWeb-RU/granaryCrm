import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { AutomationService } from '../automation/automation.service';
import { TelegramService } from '../notifications/telegram/telegram.service';
import { CustomFieldsService } from '../custom-fields/custom-fields.service';

@Injectable()
export class ActivitiesService {
  constructor(
    private prisma: PrismaService,
    private automationService: AutomationService,
    private telegramService: TelegramService,
    private customFieldsService: CustomFieldsService, // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
  ) {}

  async create(data: {
    title: string;
    type: string;
    status: string;
    description?: string;
    date: Date;
    ownerId: string;
    accountId?: string;
    contactId?: string;
    dealId?: string;
    customFields?: Record<string, any>; // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
  }) {
    const { customFields, ...activityData } = data;

    const activity = await this.prisma.activity.create({ data: activityData });

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    if (customFields) {
      await this.customFieldsService.saveValues('activity', activity.id, customFields);
    }

    // üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    await this.automationService.run('activity', 'on_create', activity);

    // üì≤ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const user = await this.prisma.user.findUnique({ where: { id: activity.ownerId } });
    if (user?.telegramId) {
      await this.telegramService.sendNotification(user.id, `üóì –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${activity.title}`);
    }

    return activity;
  }

  findAll() {
    return this.prisma.activity.findMany({
      include: {
        owner: true,
        account: true,
        contact: true,
        deal: true,
      },
      orderBy: { date: 'asc' },
    });
  }

  findById(id: string) {
    return this.prisma.activity.findUnique({
      where: { id },
      include: { account: true, contact: true, deal: true },
    });
  }

  async update(id: string, data: Partial<Omit<Parameters<typeof this.create>[0], 'ownerId'>>) {
    const { customFields, ...activityData } = data;

    const old = await this.prisma.activity.findUnique({ where: { id } });
    if (!old) throw new NotFoundException('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const updated = await this.prisma.activity.update({ where: { id }, data: activityData });

    // üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    if (customFields) {
      await this.customFieldsService.saveValues('activity', id, customFields);
    }

    // üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    await this.automationService.run('activity', 'on_update', updated, old);

    return updated;
  }

  delete(id: string) {
    return this.prisma.activity.delete({ where: { id } });
  }

  async moveToStatus(id: string, status: string) {
    const activity = await this.prisma.activity.findUnique({ where: { id } });
    if (!activity) throw new NotFoundException('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const updated = await this.prisma.activity.update({
      where: { id },
      data: { status },
    });

    // üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    await this.automationService.run('activity', 'on_update', updated, activity);

    return updated;
  }

  async getKanbanActivities() {
    return this.prisma.activity.findMany({
      orderBy: { date: 'asc' },
    });
  }

  async getCalendar(from: Date, to: Date, userId?: string) {
    return this.prisma.activity.findMany({
      where: {
        date: {
          gte: from,
          lte: to,
        },
        ...(userId && { ownerId: userId }),
      },
      include: {
        account: true,
        contact: true,
        deal: true,
      },
      orderBy: { date: 'asc' },
    });
  }
}
