import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import axios from 'axios';
import { subDays } from 'date-fns';
import { AutomationService } from '../automation/automation.service';
import { CustomFieldsService } from '../custom-fields/custom-fields.service';
import { FolderStorageService } from '../folder-storage/folder-storage.service';
import { TelegramService } from '../notifications/telegram/telegram.service';
import { PrismaLoggedService } from '../prisma-logged/prisma-logged.service';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class DealsService {
  constructor(
    private prisma: PrismaService,
    private folderStorageService: FolderStorageService,
    private automationService: AutomationService,
    private telegramService: TelegramService,
    private customFieldsService: CustomFieldsService,
    private prismaLogged: PrismaLoggedService,
  ) {}

  /**
   * –ü—Ä–æ–±—É–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –∞—Ä—Ö–∏–≤–Ω—ã–π URL, –ø—Ä–∏ 404 ‚Äî –ø–∞–¥–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π daily_json.js.
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ UTC, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è –∏–∑-–∑–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
   */
  private async fetchJsonUrl(url: string) {
    console.log(`[fetchJsonUrl] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}`);
    try {
      const resp = await axios.get<{
        Valute: Record<string, { Value: number }>;
      }>(url);
      console.log(
        `[fetchJsonUrl] –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ${url}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:`,
        Object.keys(resp.data.Valute),
        '–û—Ç–≤–µ—Ç:',
        JSON.stringify(resp.data.Valute, null, 2),
      );
      return resp.data.Valute;
    } catch (err: any) {
      if (axios.isAxiosError(err) && err.response?.status === 404) {
        console.warn(`[fetchJsonUrl] 404 –¥–ª—è ${url}, –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
        return null;
      }
      console.error(
        `[fetchJsonUrl] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`,
        err.message,
        '–°—Ç–∞—Ç—É—Å:',
        err.response?.status,
        '–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:',
        err.response?.data,
      );
      throw err;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
   * –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π.
   */
  async getCBRate(date: Date, currency: string): Promise<number | null> {
    console.log(
      `[getCBRate] –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –¥–ª—è ${currency} –Ω–∞ –¥–∞—Ç—É ${date.toISOString()}`,
    );
    const maxAttempts = 7;

    for (let i = 0; i < maxAttempts; i++) {
      const current = subDays(date, i);
      const yyyy = current.getUTCFullYear();
      const mm = String(current.getUTCMonth() + 1).padStart(2, '0');
      const dd = String(current.getUTCDate()).padStart(2, '0');
      const archiveUrl = `https://www.cbr-xml-daily.ru/archive/${yyyy}/${mm}/${dd}/daily_json.js`;

      console.log(
        `[getCBRate] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ –∑–∞ ${yyyy}-${mm}-${dd} (${
          i === 0 ? '–∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞' : `-${i} –¥–Ω–µ–π`
        })`,
      );

      const rates = await this.fetchJsonUrl(archiveUrl);
      console.log(
        `[getCBRate] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∑–∞ ${yyyy}-${mm}-${dd}:`,
        rates ? Object.keys(rates) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      );

      if (rates?.[currency]) {
        console.log(
          `[getCBRate] ‚úÖ –ù–∞–π–¥–µ–Ω –∫—É—Ä—Å ${currency} = ${rates[currency].Value} –Ω–∞ ${yyyy}-${mm}-${dd}`,
        );
        return rates[currency].Value;
      } else {
        console.log(
          `[getCBRate] –ö—É—Ä—Å –¥–ª—è ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∑–∞ ${yyyy}-${mm}-${dd}`,
        );
      }
    }

    console.log(`[getCBRate] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è ${currency}`);
    const fallback = await this.fetchJsonUrl(
      'https://www.cbr-xml-daily.ru/daily_json.js',
    );
    console.log(
      `[getCBRate] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:`,
      fallback ? Object.keys(fallback) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
    );

    if (fallback?.[currency]) {
      console.log(
        `[getCBRate] ‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å ${currency} = ${fallback[currency].Value}`,
      );
      return fallback[currency].Value;
    } else {
      console.log(`[getCBRate] –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è ${currency} —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.error(
      `[getCBRate] ‚ùå –ö—É—Ä—Å –¥–ª—è ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${maxAttempts} –¥–Ω–µ–π + —Å–µ–≥–æ–¥–Ω—è –æ—Ç ${date.toISOString()}`,
    );
    return null;
  }

  async create(data: {
    title: string;
    amount: number;
    stage: string;
    probability: number;
    closeDate: Date | string;
    dealType?: string;
    product?: string;
    packaging?: string;
    deliveryType?: string;
    transport?: string;
    currency?: string;
    price?: number;
    accountId?: string;
    contactId?: string;
    ownerId: string;
    customFields?: Record<string, any>;
  }) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º closeDate –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const closeDateLog =
      data.closeDate instanceof Date
        ? data.closeDate.toISOString()
        : typeof data.closeDate === 'string'
          ? data.closeDate
          : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    console.log(`[create] –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:`, {
      title: data.title,
      currency: data.currency,
      closeDate: closeDateLog,
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º closeDate –≤ Date –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const closeDate =
      typeof data.closeDate === 'string'
        ? new Date(data.closeDate)
        : data.closeDate;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (closeDate && isNaN(closeDate.getTime())) {
      console.error(`[create] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç closeDate: ${data.closeDate}`);
      throw new BadRequestException('Invalid closeDate format');
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º product –≤ nomenclature –¥–ª—è Prisma
    const { customFields, product, ...dealData } = data;
    const prismaData = {
      ...dealData,
      closeDate,
      nomenclature: product,
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤–∞–ª—é—Ç–∞ –∏ –¥–∞—Ç–∞
    let cbRate: number | null = null;
    if (dealData.currency && closeDate) {
      console.log(
        `[create] –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –¥–ª—è ${dealData.currency} –Ω–∞ ${closeDate.toISOString()}`,
      );
      cbRate = await this.getCBRate(closeDate, dealData.currency);
      console.log(`[create] –ö—É—Ä—Å ${dealData.currency} = ${cbRate}`);
    }

    console.log(`[create] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è —Å–¥–µ–ª–∫–∏:`, prismaData);
    const deal = await this.prisma.deal.create({
      data: {
        ...prismaData,
        cbRate,
      },
      include: { account: true },
    });

    console.log(`[create] –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:`, { id: deal.id, title: deal.title });

    if (customFields) {
      console.log(
        `[create] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.id}`,
      );
      await this.customFieldsService.saveValues('deal', deal.id, customFields);
      console.log(
        `[create] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.id}`,
      );
    }

    if (deal.accountId && deal.account) {
      console.log(`[create] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–¥–µ–ª–∫–∏ ${deal.id}`);
      const accountFolder =
        await this.folderStorageService.findOrCreateAccountFolder(
          deal.accountId,
          deal.account.name,
          deal.ownerId,
        );
      await this.folderStorageService.findOrCreateDealFolder(
        deal.id,
        deal.title,
        deal.ownerId,
        deal.accountId, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º accountId –≤–º–µ—Å—Ç–æ accountFolder.id
      );
      console.log(`[create] –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.id}`);
    }

    console.log(`[create] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.id}`);
    await this.automationService.run('deal', 'on_create', deal);
    console.log(`[create] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.id}`);

    const user = await this.prisma.user.findUnique({
      where: { id: deal.ownerId },
    });
    if (user?.telegramId) {
      console.log(
        `[create] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`,
      );
      await this.telegramService.sendNotification(
        user.id,
        `üìå –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: ${deal.title}`,
      );
      console.log(
        `[create] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`,
      );
    }

    return deal;
  }

  async update(
    id: string,
    data: Partial<Omit<Parameters<typeof this.create>[0], 'ownerId'>>,
  ) {
    console.log(`[update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${id}:`, data);
    const { customFields, product, ...dealData } = data;
    console.log(`[update] –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ ${id} –≤ –±–∞–∑–µ`);
    const oldDeal = await this.prisma.deal.findUnique({ where: { id } });
    if (!oldDeal) {
      console.error(`[update] –°–¥–µ–ª–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new NotFoundException('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º closeDate –≤ Date, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    const newDate =
      typeof dealData.closeDate === 'string'
        ? new Date(dealData.closeDate)
        : (dealData.closeDate ?? oldDeal.closeDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (newDate && isNaN(newDate.getTime())) {
      console.error(
        `[update] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç closeDate: ${dealData.closeDate}`,
      );
      throw new BadRequestException('Invalid closeDate format');
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º product –≤ nomenclature –¥–ª—è Prisma
    const prismaData = {
      ...dealData,
      nomenclature: product,
    };

    // –ï—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞—Ç—É –∏–ª–∏ –≤–∞–ª—é—Ç—É ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å
    let cbRate = oldDeal.cbRate;
    const newCurrency = dealData.currency ?? oldDeal.currency;
    if (newDate && newCurrency) {
      console.log(
        `[update] –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –¥–ª—è ${newCurrency} –Ω–∞ ${newDate.toISOString()} –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`,
      );
      cbRate = await this.getCBRate(newDate, newCurrency);
      console.log(`[update] –ö—É—Ä—Å ${newCurrency} = ${cbRate} –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    }

    console.log(
      `[update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}:`,
      prismaData,
    );
    const updated = await this.prismaLogged.updateWithLog(
      'deal',
      id,
      oldDeal.ownerId,
      { ...prismaData, closeDate: newDate, cbRate },
      () => Promise.resolve(oldDeal),
      () =>
        this.prisma.deal.update({
          where: { id },
          data: { ...prismaData, closeDate: newDate, cbRate },
        }),
    );

    console.log(`[update] –°–¥–µ–ª–∫–∞ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, updated);

    if (customFields) {
      console.log(
        `[update] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`,
      );
      await this.customFieldsService.saveValues('deal', id, customFields);
      console.log(`[update] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    }

    console.log(`[update] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    await this.automationService.run('deal', 'on_update', updated, oldDeal);
    console.log(`[update] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);

    return updated;
  }

  findAll() {
    console.log(`[findAll] –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫`);
    return this.prisma.deal.findMany({
      include: { owner: true, account: true, contact: true },
    });
  }

  findById(id: string) {
    console.log(`[findById] –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–∫–∏ ${id}`);
    return this.prisma.deal.findUnique({
      where: { id },
      include: { account: true, contact: true },
    });
  }

  async delete(id: string) {
    console.log(`[delete] –£–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${id}`);
    console.log(`[delete] –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ ${id} –≤ –±–∞–∑–µ`);
    const deal = await this.prisma.deal.findUnique({ where: { id } });
    if (!deal) {
      console.error(`[delete] –°–¥–µ–ª–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new NotFoundException('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    console.log(`[delete] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    return this.prismaLogged.deleteWithLog('deal', id, deal.ownerId, () =>
      this.prisma.deal.delete({ where: { id } }),
    );
  }

  async moveToStage(id: string, stage: string) {
    console.log(`[moveToStage] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${id} –≤ —ç—Ç–∞–ø ${stage}`);
    console.log(`[moveToStage] –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ ${id} –≤ –±–∞–∑–µ`);
    const deal = await this.prisma.deal.findUnique({ where: { id } });
    if (!deal) {
      console.error(`[moveToStage] –°–¥–µ–ª–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new NotFoundException('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    console.log(`[moveToStage] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    const updated = await this.prismaLogged.updateWithLog(
      'deal',
      id,
      deal.ownerId,
      { stage },
      () => this.prisma.deal.findUnique({ where: { id } }),
      () => this.prisma.deal.update({ where: { id }, data: { stage } }),
    );
    console.log(`[moveToStage] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${id}`);
    await this.automationService.run('deal', 'on_update', updated, deal);
    console.log(`[moveToStage] –°–¥–µ–ª–∫–∞ ${id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —ç—Ç–∞–ø ${stage}`);
    return updated;
  }

  async getKanbanDeals() {
    console.log(`[getKanbanDeals] –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–∞–Ω–±–∞–Ω–∞`);
    return this.prisma.deal.findMany({
      orderBy: { closeDate: 'asc' },
    });
  }
}
