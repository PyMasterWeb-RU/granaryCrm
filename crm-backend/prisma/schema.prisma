generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(uuid())
  email                String   @unique
  password             String
  name                 String
  telegramId           String? // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  notificationsEnabled Boolean  @default(true)
  role                 Role     @relation(fields: [roleId], references: [id])
  roleId               String
  createdAt            DateTime @default(now())

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  Account Account[]

  Contact Contact[]

  Deal Deal[]

  Activity Activity[]

  EmailAccount EmailAccount[]

  EmailTemplate EmailTemplate[]

  EmailMessage EmailMessage[]

  EmailInboxMessage EmailInboxMessage[]

  EmailContact EmailContact[]

  DocumentTemplate DocumentTemplate[]

  GeneratedDocument GeneratedDocument[]

  FileFolder FileFolder[]

  File File[]

  SharedAccess SharedAccess[]

  AuditLog AuditLog[]

  Comment Comment[]

  Notification Notification[]
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Team {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Account {
  id        String   @id @default(uuid())
  name      String
  industry  String?
  phone     String?
  email     String?
  website   String?
  address   String?
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())

  Contact Contact[]

  Deal Deal[]

  Activity Activity[]
}

model Contact {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  position  String? // –î–æ–ª–∂–Ω–æ—Å—Ç—å
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  createdAt DateTime @default(now())

  Deal Deal[]

  Activity Activity[]

  ContactTag ContactTag[]
}

model Deal {
  id          String   @id @default(uuid())
  title       String
  amount      Float
  stage       String
  probability Int
  closeDate   DateTime
  account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?
  contact     Contact? @relation(fields: [contactId], references: [id])
  contactId   String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime @default(now())

  Activity Activity[]

  DealTag DealTag[]
}

model Activity {
  id             String    @id @default(uuid())
  title          String
  type           String // task | call | meeting
  status         String // –æ–∂–∏–¥–∞–µ—Ç—Å—è | –≤—ã–ø–æ–ª–Ω–µ–Ω–æ | –æ—Ç–º–µ–Ω–µ–Ω–æ
  description    String?
  date           DateTime
  owner          User      @relation(fields: [ownerId], references: [id])
  ownerId        String
  repeat         Boolean   @default(false)
  repeatPattern  String? // daily | weekly | monthly
  repeatInterval Int? // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è / 1 –Ω–µ–¥–µ–ª—è –∏ —Ç.–¥.
  repeatUntil    DateTime? // –∫–æ–≥–¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
  remindAt       DateTime? // —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  remindType     String? // once | daily | weekly –∏ —Ç.–ø. (–Ω–∞ –±—É–¥—É—â–µ–µ)

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?

  deal   Deal?   @relation(fields: [dealId], references: [id])
  dealId String?

  parentId String?
  parent   Activity?  @relation("SubTasks", fields: [parentId], references: [id])
  subtasks Activity[] @relation("SubTasks")

  createdAt DateTime @default(now())

  tags Tag[] @relation("ActivityTags")
}

model EmailAccount {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  smtpHost   String
  smtpPort   Int
  smtpSecure Boolean
  email      String
  password   String // —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ base64
  createdAt  DateTime @default(now())
}

model EmailTemplate {
  id        String   @id @default(uuid())
  name      String
  subject   String
  body      String // HTML
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  EmailMessage EmailMessage[]
}

model EmailMessage {
  id          String         @id @default(uuid())
  subject     String
  to          String
  body        String
  status      String // sent | failed
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId  String?
  attachments Json?
  createdAt   DateTime       @default(now())
}

model EmailInboxMessage {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  from        String
  to          String
  subject     String
  text        String?
  html        String?
  date        DateTime
  folder      String // inbox, sent, spam, trash, drafts
  messageId   String   @unique
  seen        Boolean  @default(false)
  flagged     Boolean  @default(false)
  attachments Json? // [{ filename, contentType, size, downloadUrl }]
  createdAt   DateTime @default(now())
}

model EmailContact {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  email     String
  name      String?
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())

  @@unique([userId, email]) // —á—Ç–æ–±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª—Å—è
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  content   String // HTML –∏–ª–∏ markdown
  format    String // pdf | docx
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  GeneratedDocument GeneratedDocument[]
}

model GeneratedDocument {
  id         String           @id @default(uuid())
  filePath   String
  format     String
  template   DocumentTemplate @relation(fields: [templateId], references: [id])
  templateId String
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  createdAt  DateTime         @default(now())
}

model FileFolder {
  id        String   @id @default(uuid())
  name      String
  parentId  String? // null = –∫–æ—Ä–µ–Ω—å
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  access    String // private | shared | public
  createdAt DateTime @default(now())
  files     File[]   @relation("FolderFiles")
  accountId String? // –°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º
  dealId    String? // –°–≤—è–∑—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–æ–π
}

model File {
  id         String      @id @default(uuid())
  name       String
  path       String
  size       Int
  mimeType   String
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  folderId   String?
  folder     FileFolder? @relation("FolderFiles", fields: [folderId], references: [id])
  dealId     String? // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–¥–µ–ª–∫–µ
  contactId  String? // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
  taskId     String? // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∑–∞–¥–∞—á–µ
  publicLink String?     @unique
  expiresAt  DateTime? // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
  access     String // private | shared | public
  createdAt  DateTime    @default(now())

  commentId String? // üëà —Å–≤—è–∑—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
  comment   Comment? @relation("CommentFiles", fields: [commentId], references: [id])
}

model SettingOption {
  id        String   @id @default(uuid())
  category  String // deal-stage, activity-status, activity-type, etc.
  label     String
  value     String // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: new, in_progress)
  position  Int      @default(0) // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  createdAt DateTime @default(now())
}

model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealTag {
  dealId String
  tagId  String
  deal   Deal   @relation(fields: [dealId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([dealId, tagId])
}

model ContactTag {
  contactId String
  tagId     String
  contact   Contact @relation(fields: [contactId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([contactId, tagId])
}

model Tag {
  id        String   @id @default(uuid())
  label     String
  color     String // hex –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
  createdAt DateTime @default(now())

  // —Å–≤—è–∑–∏
  DealTags    DealTag[]
  ContactTags ContactTag[]
  activities  Activity[]   @relation("ActivityTags")
}

model Webhook {
  id        String   @id @default(uuid())
  url       String
  event     String // –Ω–∞–ø—Ä–∏–º–µ—Ä: task.created
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
}

model SharedAccess {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  entityId  String // UUID –æ–±—ä–µ–∫—Ç–∞ (dealId, accountId –∏ —Ç.–¥.)
  entity    String // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: deal, account, contact
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([userId, entityId, entity]) // ‚¨ÖÔ∏è –ø–æ–º–µ–Ω—è–ª–∏ —Å @@index –Ω–∞ @@unique
}

model AutomationRule {
  id        String   @id @default(uuid())
  name      String
  entity    String // deal, activity, contact –∏ —Ç.–¥.
  trigger   String // on_create, on_update, cron
  field     String? // –ø–æ–ª–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: stage)
  condition Json // —É—Å–ª–æ–≤–∏–µ –≤ –≤–∏–¥–µ JSON: { equals: "Won" }
  action    Json // –¥–µ–π—Å—Ç–≤–∏–µ: { type: "email", templateId: "...", to: "..." }
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
}

model CustomField {
  id        String             @id @default(uuid())
  entity    String // –ù–∞–ø—Ä–∏–º–µ—Ä: deal, activity, contact
  name      String // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è: custom_ref, etc.
  label     String // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  type      String // text | number | date | boolean | select
  options   Json? // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ type = select
  required  Boolean            @default(false)
  createdAt DateTime           @default(now())
  values    CustomFieldValue[]
}

model CustomFieldValue {
  id        String      @id @default(uuid())
  field     CustomField @relation(fields: [fieldId], references: [id])
  fieldId   String
  entity    String // deal | activity | ...
  entityId  String // ID —Å–¥–µ–ª–∫–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  value     String
  createdAt DateTime    @default(now())

  @@index([entity, entityId])
}

model AuditLog {
  id        String   @id @default(uuid())
  entity    String // 'deal', 'activity' –∏ —Ç.–¥.
  entityId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String // create, update, delete
  changes   Json? // { field: { from: '...', to: '...' } }
  createdAt DateTime @default(now())

  @@index([entity, entityId])
}

model Comment {
  id        String   @id @default(uuid())
  entity    String // –ù–∞–ø—Ä–∏–º–µ—Ä: deal, activity, account
  entityId  String // ID —Å—É—â–Ω–æ—Å—Ç–∏
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mentions  String[] @default([]) // –°–ø–∏—Å–æ–∫ userId, –∫–æ–≥–æ —É–ø–æ–º—è–Ω—É–ª–∏
  createdAt DateTime @default(now())
  files     File[]   @relation("CommentFiles")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // task, deal, comment, etc.
  message   String
  link      String? // URL –ø–µ—Ä–µ—Ö–æ–¥–∞
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead])
}

model UiFieldConfig {
  id        String   @id @default(uuid())
  entity    String // deal | activity | contact –∏ —Ç.–¥.
  name      String // system name: amount, title, status
  label     String // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
  section   String? // –≤–∫–ª–∞–¥–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞
  visible   Boolean  @default(true)
  required  Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([entity, name])
}
